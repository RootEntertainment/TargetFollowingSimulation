// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "ROSConsts.h"
#include "AI/RVOAvoidanceInterface.h"
#include "AI/Navigation/NavigationAvoidanceTypes.h"
#include "GameFramework/FloatingPawnMovement.h"
#include "GameFramework/PawnMovementComponent.h"
#include "ROSPawnMovement.generated.h"

/**
 * 
 */
UCLASS(ClassGroup = Movement, meta = (BlueprintSpawnableComponent))
class ROSPROJECT_API UROSPawnMovement : public UPawnMovementComponent, public IRVOAvoidanceInterface
{
	GENERATED_BODY()
	
public:
	
	UROSPawnMovement();

	virtual void SetLinearVelocity(const FVector& InSpeed)
	{
		DesiredLinearVelocity = InSpeed;
	}
	virtual void SetAngularVelocity(const FVector& InSpeed)
	{
		DesiredAngularVelocity = InSpeed;
	}
	virtual void SetVelocity(const FVector& LinearVelocity, const FVector& AngularVelocity)
	{
		DesiredLinearVelocity = LinearVelocity;
		DesiredAngularVelocity = AngularVelocity;
	}
	virtual void Brake()
	{
		DesiredLinearVelocity = FVector::ZeroVector;
		DesiredAngularVelocity = FVector::ZeroVector;
	}
	virtual void ReleaseBrake(){}
	
protected:
	FVector DesiredLinearVelocity;
	FVector DesiredAngularVelocity;
	
public:
	virtual void BeginPlay() override;
	virtual void TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override;
	FVector GetDesiredLinearVelocity() const
	{
		return DesiredLinearVelocity;
	}

	FVector GetDesiredAngularVelocity() const
	{
		return DesiredAngularVelocity;
	}
	
protected:
	
	//RVO BEGIN
	int32 AvoidanceUID = 0;
	UPROPERTY(EditAnywhere)
	float AvoidanceWeight = 0.5;
	UPROPERTY(EditAnywhere)
	float RVOAvoidanceRadius;
	UPROPERTY(EditAnywhere)
	float RVOAvoidanceHeight;
	UPROPERTY(EditAnywhere, AdvancedDisplay)
	FNavAvoidanceMask AvoidanceGroup;
	UPROPERTY(EditAnywhere, AdvancedDisplay)
	FNavAvoidanceMask GroupsToAvoid;
	/** Will NOT avoid other agents if they are in one of specified groups, higher priority than GroupsToAvoid */
	UPROPERTY(EditAnywhere, AdvancedDisplay)
	FNavAvoidanceMask GroupsToIgnore;
	/** Store the AvoidanceUID generated by the Avoidance Manager **/
	virtual void SetRVOAvoidanceUID(int32 UID) override;

	/** Return the AvoidanceUID assigned by the Avoidance Manager during registration **/
	virtual int32 GetRVOAvoidanceUID() override;

	/** Store the AvoidanceWeight generated by the Avoidance Manager **/
	virtual void SetRVOAvoidanceWeight(float Weight) override;

	/** Returns the AvoidanceWeight assigned by the Avoidance Manager during registration **/
	virtual float GetRVOAvoidanceWeight() override;

	/** Get the Location from where the RVO avoidance should originate **/
	virtual FVector GetRVOAvoidanceOrigin() override;

	/** The scaled collider radius to consider for RVO avoidance **/
	virtual float GetRVOAvoidanceRadius() override;

	/** The scaled collider height to consider for RVO avoidance **/
	virtual float GetRVOAvoidanceHeight() override;

	/** The scaled collider radius to consider for RVO avoidance **/
	virtual float GetRVOAvoidanceConsiderationRadius() override;

	/** The velocity of the avoiding entity **/
	virtual FVector GetVelocityForRVOConsideration() override;

	/** Store the avoidance group mask **/
	virtual void SetAvoidanceGroupMask(int32 GroupFlags) override;

	/** This actor's avoidance group mask **/
	virtual int32 GetAvoidanceGroupMask() override;

	/** Store the groups to avoid mask **/
	virtual void SetGroupsToAvoidMask(int32 GroupFlags) override;

	/** Agent groups to avoid mask **/
	virtual int32 GetGroupsToAvoidMask() override;

	/** Store the groups to ignore mask **/
	virtual void SetGroupsToIgnoreMask(int32 GroupFlags) override;

	/** Agent groups to ignore **/
	virtual int32 GetGroupsToIgnoreMask() override;
	//RVO END
};
